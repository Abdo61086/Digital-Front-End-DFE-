import numpy as np
class Fractional_Decimator:
    def __init__(self):
        self.LPF_coeff_raw = [
            0.000045004823430924572344544870583504803,
            0.000497236624381468153392737985285521063,
            0.001289118160550051673390870021762566466,
            0.002223824336153744710142809992703405442,
            0.00270914912260436339941360728289510007 ,
            0.002222203478842850205704495536451759108,
            0.000787838146918160703302547176463122014,
            -0.000836464414575218751825291807477924522,
            -0.001594682227421634086034218924510241777,
            -0.000961613665177639474583581868927240066,
            0.000514622206127393643816658741485525752,
            0.001539826573050756802069072293193130463,
            0.001141353743122764394582469016370396275,
            -0.000404229230293393928218070865199251784,
            -0.001696983948166241266269915755060537776,
            -0.001435666737475100891013868320555957325,
            0.000296579454373022165843826192244137019,
            0.001942377215052883826507112985382264014,
            0.001835399229011572437564314697056033765,
            -0.00014124025202028652609120840111245343 ,
            -0.002231735278383742589192184624380388414,
            -0.002333368230052695804083162656183958461,
            -0.000081607204263929534939631116330360783,
            0.00254684974190714065803153864919750049 ,
            0.002930978617887391307617050983935769182,
            0.000387244629495083684915524013803178605,
            -0.002877502884389440251239333790067576047,
            -0.003634704014429313966710877181753858167,
            -0.000791989211605007925945387547983500554,
            0.003215387676522365578007933706317089673,
            0.004453700681236707342725011926631850656,
            0.001312371717575797937238579748964184546,
            -0.003556659209536681184177231429544008279,
            -0.005405912928401838610237284399318014039,
            -0.001974135428092143457190488220476254355,
            0.003893156087334632628471631221600546269,
            0.006510392260481040645203609784630316426,
            0.002803488218669739247268513082644858514,
            -0.004225293962207838337208354317908742814,
            -0.007806787488667500489458728196723313886,
            -0.003850671240106069096592600331518951862,
            0.00453954517795913514016659107142004359 ,
            0.009335211741249231642836292621723259799,
            0.005168333524723733862771268832148052752,
            -0.004839403233706946090564304796544092824,
            -0.011179046509722343968884494813664787216,
            -0.006855766126074819104274649106400829623,
            0.005116741114458551314969625423145771492,
            0.01346098805942266135593499143396911677 ,
            0.009065836520764616185408257820199651178,
            -0.005364898521824830630866376424137342838,
            -0.016392171989338292364957183622209413443,
            -0.012060771276277821445477300699167244602,
            0.005583260005479460247324041688443685416,
            0.020377466831880047815062084737292025238,
            0.016353398762364770163690863569172506686,
            -0.005768793916136752755741134990330465371,
            -0.026265931286542528594329937163820432033,
            -0.023073978687126156517095409981266129762,
            0.005915343809382199273538827100082926336,
            0.036181314511961985835863941929346765392,
            0.035284986732670997611194252385757863522,
            -0.006020295998047855458301658160280567245,
            -0.057365607250836669894766828292631544173,
            -0.065248392047278822025724309696670388803,
            0.006085003500039720854275504535735308309,
            0.140563378069011868376492202514782547951,
            0.272454074639610632768693676553084515035,
            0.327227540194307497944947726864484138787,
            0.272454074639610632768693676553084515035,
            0.140563378069011868376492202514782547951,
            0.006085003500039720854275504535735308309,
            -0.065248392047278822025724309696670388803,
            -0.057365607250836669894766828292631544173,
            -0.006020295998047855458301658160280567245,
            0.035284986732670997611194252385757863522,
            0.036181314511961985835863941929346765392,
            0.005915343809382199273538827100082926336,
            -0.023073978687126156517095409981266129762,
            -0.026265931286542528594329937163820432033,
            -0.005768793916136752755741134990330465371,
            0.016353398762364770163690863569172506686,
            0.020377466831880047815062084737292025238,
            0.005583260005479460247324041688443685416,
            -0.012060771276277821445477300699167244602,
            -0.016392171989338292364957183622209413443,
            -0.005364898521824830630866376424137342838,
            0.009065836520764616185408257820199651178,
            0.01346098805942266135593499143396911677 ,
            0.005116741114458551314969625423145771492,
            -0.006855766126074819104274649106400829623,
            -0.011179046509722343968884494813664787216,
            -0.004839403233706946090564304796544092824,
            0.005168333524723733862771268832148052752,
            0.009335211741249231642836292621723259799,
            0.00453954517795913514016659107142004359 ,
            -0.003850671240106069096592600331518951862,
            -0.007806787488667500489458728196723313886,
            -0.004225293962207838337208354317908742814,
            0.002803488218669739247268513082644858514,
            0.006510392260481040645203609784630316426,
            0.003893156087334632628471631221600546269,
            -0.001974135428092143457190488220476254355,
            -0.005405912928401838610237284399318014039,
            -0.003556659209536681184177231429544008279,
            0.001312371717575797937238579748964184546,
            0.004453700681236707342725011926631850656,
            0.003215387676522365578007933706317089673,
            -0.000791989211605007925945387547983500554,
            -0.003634704014429313966710877181753858167,
            -0.002877502884389440251239333790067576047,
            0.000387244629495083684915524013803178605,
            0.002930978617887391307617050983935769182,
            0.00254684974190714065803153864919750049 ,
            -0.000081607204263929534939631116330360783,
            -0.002333368230052695804083162656183958461,
            -0.002231735278383742589192184624380388414,
            -0.00014124025202028652609120840111245343 ,
            0.001835399229011572437564314697056033765,
            0.001942377215052883826507112985382264014,
            0.000296579454373022165843826192244137019,
            -0.001435666737475100891013868320555957325,
            -0.001696983948166241266269915755060537776,
            -0.000404229230293393928218070865199251784,
            0.001141353743122764394582469016370396275,
            0.001539826573050756802069072293193130463,
            0.000514622206127393643816658741485525752,
            -0.000961613665177639474583581868927240066,
            -0.001594682227421634086034218924510241777,
            -0.000836464414575218751825291807477924522,
            0.000787838146918160703302547176463122014,
            0.002222203478842850205704495536451759108,
            0.00270914912260436339941360728289510007 ,
            0.002223824336153744710142809992703405442,
            0.001289118160550051673390870021762566466,
            0.000497236624381468153392737985285521063,
            0.000045004823430924572344544870583504803,
            0,
            0
            ]
        

    def up_sample(self, input_signal, L):
        input_signal_up = np.zeros(len(input_signal)* L)
        input_signal_up[::L] = input_signal
        return input_signal_up
    

    def down_sample(self, input_signal, M):
        input_signal_down = input_signal[2::M]
        return input_signal_down        


    def fir_LPF(self, input_signal):
        # LPF_coeff_fp = [fp.FixedPoint(sample, 1, 1, 15) for sample in self.LPF_coeff_raw]
        LPF_coeff_fp = [round(sample * (1 << 15)) for sample in self.LPF_coeff_raw]
        with open("filter_coeff.txt", "w") as f:
            for item in LPF_coeff_fp:
             f.write(f"{(hex(item & 0xFFFF)[2:])}\n")

        # Coeff After quantization
        LPF_coeff = np.array([float(sample) for sample in LPF_coeff_fp])
        
        filtered_signal = np.zeros(len(LPF_coeff_fp) + len(input_signal) - 1)
        for n in range(len(LPF_coeff_fp) + len(input_signal) - 1):
            y_n = 0
            for k in range(len(LPF_coeff_fp)):
                if 0 <= n-k < len(input_signal) :
                    y_n += (LPF_coeff_fp[k]) * (int(input_signal[n-k]))
                    
            filtered_signal[n] = y_n >> 15
        # filtered_signal = np.convolve(input_signal, LPF_coeff_fp, mode='full')
        return filtered_signal    
    
    def decimator(self, input_signal, L, M):
        input_signal_up = self.up_sample(input_signal, L)
        input_signal_up_filtered = self.fir_LPF(input_signal_up)


        input_signal_down = self.down_sample(input_signal_up_filtered, M)


        with open("output_vectors.txt", "w") as f:
            for item in input_signal_down:
                f.write(f"{(hex(int(item) & 0xFFFF)[2:])}\n")
        return input_signal_down